@using System.Collections.Generic
@using System.Linq
@using ApiGenerator.Domain
@using ApiGenerator

@functions {
	private const string RawSize = "Raw";
	private const string SizeEnum = "Size";

	private string CreateEnum(string enumName, string value, int? i)
	{
		var enumValue = (enumName == SizeEnum && value == string.Empty) ? RawSize : value.ToPascalCase(true);
		return string.Format("[EnumMember(Value = \"{0}\")]\r\n\t\t{1}{2}", value, enumValue, i.HasValue ? " = 1 << " + i.Value : null);
	}
	private string CreateCase(string e, string o)
	{
		var enumValue = (e == SizeEnum && o == string.Empty) ? RawSize : o.ToPascalCase(true);
		return string.Format("case {0}.{1}: return \"{2}\";", e, enumValue, o);
	}
	private bool IsFlag(string name)
	{
		return (name.EndsWith("Metric")) || name.EndsWith("Feature");
	}
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;

///This file contains all the typed enums that the client rest api spec exposes.
///This file is automatically generated from https://github.com/elastic/elasticsearch/tree/@Model.Commit/rest-api-spec
///Generated of commit @Model.Commit
namespace Elasticsearch.Net
{
	@foreach (EnumDescription e in Model.EnumsInTheSpec)
	{
		var isFlag = IsFlag(e.Name);
	<text>
	@(isFlag ? "[Flags]" : string.Empty)public enum @e.Name 
	{
		@Raw(string.Join(",\r\n\t\t", e.Options.OrderBy(s=>s == "_all" ? 1 : 0).Select((s, i) => CreateEnum(e.Name, s, isFlag ? (int?)i : null ))))
	}
	</text>
	}

	public static class KnownEnums
	{
		public static string UnknownEnum { get; } = "_UNKNOWN_ENUM_";
		public static string Resolve(Enum e)
		{
			@foreach (EnumDescription e in Model.EnumsInTheSpec)
			{
			var isFlag = IsFlag(e.Name);
			<text>if (e is @e.Name)
			{ </text>
			if (isFlag)
			{
				<text>var list = new @(Raw("List<string>()"));</text>
				foreach(var option in e.Options.OrderBy(s=>s == "_all" ? 1 : 0))
				{
					if (option != "_all")
					{
				<text>if (e.HasFlag(@(e.Name).@(option.ToPascalCase(true)))) list.Add("@(option)");</text>
					}
					else 
					{
				<text>if (e.HasFlag(@(e.Name).@(option.ToPascalCase(true)))) return "@(option)";</text>
					}
				}
				<text>return string.Join(",", list);</text>
			}
			else 
			{
				<text>switch((@e.Name)e)
				{
					@Raw(string.Join("\r\n\t\t\t\t\t", e.Options.Select(o =>CreateCase(e.Name,o))))
				}</text>
			}
			<text>
			}
			</text>
			}
			return UnknownEnum;
		}
	}
}
 